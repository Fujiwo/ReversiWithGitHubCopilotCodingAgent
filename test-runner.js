const { JSDOM } = require('jsdom');
const fs = require('fs');
const path = require('path');

// Set up JSDOM environment
const dom = new JSDOM(`
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
</head>
<body>
    <div class="game-container">
        <section class="game-info">
            <div class="score-container">
                <div class="score black">
                    <div class="disc black" aria-label="Black disc"></div>
                    <span id="black-score" aria-live="polite">2</span>
                </div>
                <div class="score white">
                    <div class="disc white" aria-label="White disc"></div>
                    <span id="white-score" aria-live="polite">2</span>
                </div>
            </div>
            
            <div class="status-message" id="status-message" aria-live="polite">Your turn</div>
        </section>
        
        <section class="game-board" id="game-board" aria-label="Reversi game board">
            <!-- Game board will be generated by JavaScript -->
        </section>
        
        <section class="controls">
            <div class="difficulty-selector">
                <label for="difficulty">Computer Level:</label>
                <select id="difficulty" aria-label="Select computer difficulty level">
                    <option value="easy">Easy</option>
                    <option value="medium" selected>Medium</option>
                    <option value="hard">Hard</option>
                </select>
            </div>
            
            <button id="restart-button" aria-label="Restart the game">Restart Game</button>
            <button id="undo-button" aria-label="Undo last move">Undo</button>
            <button id="help-button" aria-label="Show help">Help</button>
        </section>
        
        <div class="game-stats">
            <div class="move-counter">
                <span>Move: </span>
                <span id="move-counter">0</span>
            </div>
            <div class="board-coverage">
                <span>Coverage: </span>
                <span id="board-coverage">6%</span>
            </div>
        </div>
        
        <div id="help-section" style="display: none;">
            <h3>How to Play</h3>
            <p>Help content here...</p>
        </div>
        
        <div id="test-game-board" style="display: none;">
            <!-- Test board for UI tests -->
        </div>
    </div>
    
    <div id="test-results"></div>
</body>
</html>
`, { runScripts: "dangerously", resources: "usable" });

global.window = dom.window;
global.document = dom.window.document;
global.setTimeout = dom.window.setTimeout;
global.clearTimeout = dom.window.clearTimeout;

// Create test game board cells for UI tests
const testGameBoard = document.getElementById('test-game-board');
for (let i = 0; i < 64; i++) {
    const cell = document.createElement('div');
    cell.className = 'cell';
    cell.setAttribute('data-row', Math.floor(i / 8));
    cell.setAttribute('data-col', i % 8);
    testGameBoard.appendChild(cell);
}

// Load and execute the main game file
const gameCode = fs.readFileSync(path.join(__dirname, 'reversi.js'), 'utf8');

// Prevent the normal DOMContentLoaded event from firing
let evalCode = gameCode.replace('document.addEventListener(\'DOMContentLoaded\', initGame);', '// Removed for testing');

eval(evalCode);

// Load test framework
const testFrameworkCode = fs.readFileSync(path.join(__dirname, 'tests/test-framework.js'), 'utf8');
eval(testFrameworkCode);

// Override test framework to work in console
TestFramework.runTests = function() {
    console.log('Running tests...\n');
    
    this.passed = 0;
    this.failed = 0;
    this.totalTests = 0;
    
    this.suites.forEach(suite => {
        console.log(`\n=== ${suite.name} ===`);
        
        // Run each test in the suite
        suite.tests.forEach(test => {
            this.totalTests++;
            
            try {
                // Run beforeEach if it exists
                if (suite.beforeEach) {
                    suite.beforeEach();
                }
                
                // Run the test
                test.testFn();
                
                // Run afterEach if it exists
                if (suite.afterEach) {
                    suite.afterEach();
                }
                
                // Test passed
                console.log(`✓ ${test.description}`);
                this.passed++;
            } catch (error) {
                // Test failed
                console.log(`✗ ${test.description}`);
                console.log(`  Error: ${error.message}`);
                this.failed++;
            }
        });
    });
    
    console.log(`\n=== SUMMARY ===`);
    console.log(`Results: ${this.passed} passed, ${this.failed} failed (${this.totalTests} total)`);
    
    return { passed: this.passed, failed: this.failed, total: this.totalTests };
};

// Initialize test environment
function initTestEnvironment() {
    // Initialize board for testing without creating the UI
    gameState.board = Array.from({ length: BOARD_SIZE }, 
        () => Array(BOARD_SIZE).fill(EMPTY));
    
    // Set up starting positions
    const mid = BOARD_SIZE / 2;
    gameState.board[mid - 1][mid - 1] = WHITE;
    gameState.board[mid - 1][mid] = BLACK;
    gameState.board[mid][mid - 1] = BLACK;
    gameState.board[mid][mid] = WHITE;
    
    // Reset game state
    gameState.currentPlayer = BLACK;
    gameState.isGameOver = false;
    gameState.playerDisc = BLACK;
    gameState.computerDisc = WHITE;
    gameState.isComputerThinking = false;
    gameState.moveHistory = [];
    gameState.moveCounter = 0;
    gameState.lastMove = null;
}

// Load test files
const testFiles = [
    'test-board.js',
    'test-moves.js',
    'test-ai.js',
    'test-game-state.js',
    'test-ui.js',
    'test-advanced-board.js',
    'test-advanced-ai.js'
];

testFiles.forEach(file => {
    try {
        const testCode = fs.readFileSync(path.join(__dirname, 'tests', file), 'utf8');
        eval(testCode);
    } catch (error) {
        console.log(`Error loading test file ${file}:`, error.message);
    }
});

// Initialize and run tests
initTestEnvironment();
const results = TestFramework.runTests();

process.exit(results.failed > 0 ? 1 : 0);